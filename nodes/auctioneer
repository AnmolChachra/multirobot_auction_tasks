#!/usr/bin/env python

import time
import math
import random
import threading

import tf
import rospy
import roslib
import actionlib

from collections import deque
from geometry_msgs.msg import Twist # message type for cmd_vel
from nav_msgs.msg import Odometry # message type for position
from geometry_msgs.msg import PoseStamped # message type for a single waypoint
from nav_msgs.msg import Path # message type for waypoints
from std_msgs.msg import Bool # message type for init_coordinate: initiate the coordination - True for yes and False for no
from sensor_msgs.msg import LaserScan # message type for scan

from multirobot_auction_tasks.srv import BiddingService, BiddingServiceResponse # service to register auctionees
from multirobot_auction_tasks.msg import TaskAllocatedAction, TaskAllocatedGoal # for action client

FREQUENCY = 10 # Hz
LINEAR_VELOCITY = 0.2 # m/s
ANGULAR_VELOCITY = math.pi / 12 # rad/s

# laser constants
LASER_ANGLE_FRONT = 0.6
MIN_THRESHOLD_DISTANCE = 0.6

# auctioneer specific constants
N = 3 # number of robots spawned = number of waypoints
MIN_WAYPOINT_DIST = 2 # minimum distance between randomly generated waypoints

# publisher constants
DEFAULT_CMD_VEL_TOPIC = 'cmd_vel'
DEFAULT_SCAN_TOPIC = 'scan'
DEFAULT_WAYPOINTS_TOPIC = 'waypoints'
DEFAULT_END_ROUND_TOPIC = 'end_round'

# subscriber constants
DEFAULT_ODOM_TOPIC = 'odom'

# logging constants
BREAK_LINE = "===================================================================================================="
PROCESSING_LINES = ".\n.\n."
TAB_IT = "\t"

# random seed for result reproduction
SEED = 50

class Auctioneer:
	def __init__(self, n=N, linear_velocity=LINEAR_VELOCITY, angular_velocity=ANGULAR_VELOCITY):
		""" Constructor """
		self.n = n # number of robots in the world
		self.robot_name = str(rospy.get_namespace()) # name of the robot
		self.linear_velocity = linear_velocity
		self.angular_velocity = angular_velocity
		self.rate = rospy.Rate(FREQUENCY)

		# Setting up publishers/subscribers
		self._cmd_pub = rospy.Publisher(DEFAULT_CMD_VEL_TOPIC, Twist, queue_size=1)
		self._end_round = rospy.Publisher(DEFAULT_END_ROUND_TOPIC, Bool, queue_size=1)
		self._waypoints_pub = rospy.Publisher(DEFAULT_WAYPOINTS_TOPIC, Path, queue_size=1)

		# Setting up the subscriber for odom
		self._laser_sub = rospy.Subscriber(DEFAULT_SCAN_TOPIC, LaserScan, self._laser_callback, queue_size=1)

		# Other variables
		self.registered_auctionees = set() # set of all the auctionees registerd using registration_service of auctioneer
		self.available = [1 for _ in range(self.n)] # list of 1s and 0s where 1 at index idx represents the idx waypoint is still not allocated and 0 means that waypoint is allocated
		self.bidding_pool = {}
		self.assigned_tasks = deque()

		# Instantiate the tf listener
		self.listener = tf.TransformListener()

	def stop(self):
		""" Stop the robot """
		twist_msg = Twist()
		self._cmd_pub.publish(twist_msg)

	def rotate_in_place(self, rotation_angle):
		"""
		Rotate in place the robot of rotation_angle (rad) based on fixed velocity.
		Assumption: Counterclockwise rotation.
		"""
		twist_msg = Twist()
		twist_msg.angular.z = self.angular_velocity * (1 if rotation_angle > 0 else -1)

		duration = abs(rotation_angle / twist_msg.angular.z)

		start_time = rospy.get_rostime()

		while not rospy.is_shutdown():
			# Check if done
			if rospy.get_rostime() - start_time >= rospy.Duration(duration):
				break

			# Publish message.
			self._cmd_pub.publish(twist_msg)

			# Sleep to keep the set frequency.
			self.rate.sleep()

		twist_msg.angular.z = 0
		self._cmd_pub.publish(twist_msg)

		# Rotated the required angle, stop.
		self.stop()

	def move_forward(self, distance):
		"""Function to move_forward for a given distance."""

		# Rate at which to operate the while loop.
		rate = rospy.Rate(FREQUENCY)

		# Setting velocities. 
		twist_msg = Twist()
		twist_msg.linear.x = self.linear_velocity
		start_time = rospy.get_rostime()
		duration = rospy.Duration(distance/twist_msg.linear.x)

		start = None
		while not rospy.is_shutdown():
			# Check if traveled of given distance based on time.
			if rospy.get_rostime() - start_time >= duration:
				break

			if self._close_obstacle:
				# print "Leader says obstacle is too close"
				start = time.time()
				while self._close_obstacle:
					self.stop()
					time.sleep(1)
				end = time.time()
				# print "Leader says obstacle was too close for ", end - start
				# print "Duration ", duration 
				start_time += rospy.Duration(end - start)

			self._cmd_pub.publish(twist_msg)

			# Sleep to keep the set publishing frequency.
			rate.sleep()

		# Traveled the required distance, stop.
		self.stop()

	def move_to_waypoint(self, pose, orient):
		"""
		Given pose and orient of the waypoint, this method calculates distance and slope
		from this node's position and orientation and then use them to move the robot
		"""
		print TAB_IT, "Robot %s is moving to waypoint:" % self.robot_name, pose
		print TAB_IT, PROCESSING_LINES

		# calculate distance between two points
		d = ((self.position[0] - pose[0])**2 + (self.position[1] - pose[1])**2)**0.5

		# calculate the slope in radians
		s = math.atan2(pose[1] - self.position[1], pose[0] - self.position[0])

		roll, pitch, yaw = tf.transformations.euler_from_quaternion(self.orientation)

		# handle orientation
		yaw = s - yaw

		self.orientation

		self.rotate_in_place(yaw)
		self.move_forward(d)

		# update the positions and orientations
		self.position = pose
		self.orientation = tf.transformations.quaternion_from_euler(roll, pitch, yaw)

		print TAB_IT, "Successfully moved to the waypoint"

	def send_goal(self, robotname, task_num):
		""" 
			Create client for given 'robotname' and send goal to it's server.
			Goal is simply a task_num
		"""
		print BREAK_LINE
		print "Sending goal to robot %s" % robotname
		print PROCESSING_LINES

		client = actionlib.SimpleActionClient('/{0}/task_allocation_server'.format(robotname), TaskAllocatedAction)	
		client.wait_for_server()

		goal = TaskAllocatedGoal()

		goal.task_num = task_num

		client.send_goal(goal)
		client.wait_for_result(rospy.Duration.from_sec(5.0)) 

	def evaluate_bids_and_sell_waypoints(self):
		# This will send action and reset the bidding pool
		time.sleep(2)

		print BREAK_LINE
		print "Received all bids for a round, now evaluating and allocating"
		print PROCESSING_LINES

		if sum(self.available) > 0:

			# update the bidding pool with its own bids
			bids = self.get_bids(self.waypoints_positions)
			self.bidding_pool[self.robot_name] = bids

			# update registered auctionees
			self.registered_auctionees.add(self.robot_name)


			print TAB_IT, "Bidding Pool"
			for k, v in self.bidding_pool.items():
				print TAB_IT, TAB_IT, k, v

			# Goal --- select the smallest bid in the avaialble tasks and assign it to the robot that is bidding for that
			task_min_bids = {} # min bids made for each task by each robot
			              # key = task_num, value = (robot name, bid value)

			# Iterate the available list
			for task_num, task_avail in enumerate(self.available):
				# If a task is available for auction
				if task_avail:
					# find the minimum bid for that task and respective robot name
					
					min_bid = float("inf")
					min_robot_name = '' # by default no robot gets assigned

					for robotname in self.registered_auctionees:
						b = self.bidding_pool[robotname][task_num]
						if b < min_bid:
							min_bid = b
							min_robot_name = robotname

					if min_bid != float('inf'):
						task_min_bids[task_num] = (min_robot_name, min_bid)

			# example, 
			# for 2 tasks (0, 2) available out of 3 and for 2 robots with bidding_pool {"A": [5, 2, 3], "B": [1,3,5]}
			# task_min_bids = {0: ("B", 1), 2: ("A", 3)}
			# now find the smallest bidded task in task_min_bids
			min_bidded_task = None
			min_bidded_task_robot = ''
			min_bidded_task_bid = float("inf")
			for task_num, (robotname, bid) in task_min_bids.items():
				if bid < min_bidded_task_bid:
					min_bidded_task_bid = bid
					min_bidded_task = task_num
					min_bidded_task_robot = robotname

			# Send the goal to the auctionee unless task got assigned to itself
			if min_bidded_task != None:
				if min_bidded_task_robot == self.robot_name:
					task_position = self.waypoints_positions[min_bidded_task]
					task_orientation = self.waypoints_orientations[min_bidded_task]
					self.move_to_waypoint(task_position, task_orientation)
				else:
					self.send_goal(min_bidded_task_robot, min_bidded_task)

			print PROCESSING_LINES
			print "Performed all allocations for this round"
			print BREAK_LINE


			# Update the self.available indicate that task is done
			self.available[min_bidded_task] = 0

			# reset the bidding pool and the registerd_auctionees set
			self.bidding_pool = {}
			self.registered_auctionees = set()

			# Signal the termination of the round
			self.publish_end_round(True)


	def handle_bids(self, request):
		"""
		call back for bidding_service object
		 - adds auctionees bids in the 'bidding_pool' (type dict)
		 - if size of the 'bidding_pool' = expected bidders
		   proceed to sequentially assign the waypoints which further sends goals
		"""
		bid_accepted = False

		# Number of bids received will always be equal to the number of tasks
		# regardless the status of the task.
		# self.available handles which bids to consider in the bids received
		if len(request.bids) == len(self.waypoints_positions):
			try:
				bid_accepted = True
				robotname = request.robotname

				print BREAK_LINE
				print "Handling Bids for %s" % request.robotname
				print PROCESSING_LINES


				# update the registered pool set
				self.registered_auctionees.add(robotname)

				# update the bidding pool
				self.bidding_pool[robotname] = request.bids

				# auctioneer itself is considered a bidder so at max requires n-1 bids
				if len(self.bidding_pool.values()) == self.n - 1:
					# start a thread
					th = threading.Thread(target=self.evaluate_bids_and_sell_waypoints)
					th.start()

			except Exception as e:
				print repr(e)
				bid_accepted = False

		print PROCESSING_LINES
		print "Successfully handled the bid"
		print BREAK_LINE
		
		return BiddingServiceResponse(bid_accepted)

	def get_waypoints(self, min_bound=-10, max_bound=10, min_distance=2):
		"""
		Get the waypoints randomly - number of waypoints is equal to number of robots in the world
		waypoints values (x, y and z) will be in range [min_bound, max_bound)
		"""

		print BREAK_LINE
		print "Creating Waypoints"
		print PROCESSING_LINES

		waypoints_positions = []
		waypoints_orientations = []

		def afar_from(a, poses, dist):
			"""
			returns True
				if a point 'a' is atleast 'dist' afar_from 'b' for all 'b' in 'poses'
			return False
				otherwise
			"""
			for b in poses:
				if ((a[0] - b[0])**2 + (a[1] - b[1])**2)**0.5 < dist:
					return False
			return True

		for i in range(self.n):
			while True:
				x = random.uniform(min_bound, max_bound)
				y = random.uniform(min_bound, max_bound)
				z = random.uniform(min_bound, max_bound)
				w = (x, y, z)
				if afar_from(w, waypoints_positions, min_distance):
					waypoints_positions.append(w)
					break
			waypoints_orientations.append((0, 0, 0, 0))

		for i, j in enumerate(waypoints_positions):
			print TAB_IT, "Waypoint %d:"%i, j
		print PROCESSING_LINES
		print "Successfully created random waypoints"
		print BREAK_LINE

		return waypoints_positions, waypoints_orientations

	def set_waypoints(self, poses, orients):
		self.waypoints_positions = poses
		self.waypoints_orientations = orients


	def get_tf_from_listener(self, parent_ref_frame, child_ref_frame):
		"""
		Get transformation from listener using 'listener' instance
		"""
		trans = (0, 0, 0)
		rot = (0, 0, 0, 0)
		try:
			trans, rot = self.listener.lookupTransform(parent_ref_frame, child_ref_frame, rospy.Time(0))

		except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException) as e:
			print "Exception has occured", repr(e)
			pass
		return trans, rot

	def set_position_orientation(self, position, orientation):
		self.position = position
		self.orientation = orientation

	def get_position_orientation(self):
		print BREAK_LINE
		print "Setting up position and orientation for <<<%s>>> from tf listener" % self.robot_name
		print PROCESSING_LINES

		auctioneer_odom_frame = self.robot_name + 'odom'
		position, orientation = self.get_tf_from_listener('world', auctioneer_odom_frame)
		
		print PROCESSING_LINES
		print "Successfully set up position and orientation"
		print BREAK_LINE

		return position, orientation

	def set_bids(self, bids):
		"""
		Bid for a task is calculated as the euclidean distance between a task and robot's position
		"""
		self.bids = bids
		
	
	def get_bids(self, tasks):
		bids = []
		for task in tasks:
			d = ((self.position[0] - task[0])**2 + (self.position[1] - task[1])**2)**0.5
			bids.append(d)
		return bids

	def publish_waypoints(self, positions, orientations):
		""" This publishes the waypoints as Path message """

		print BREAK_LINE
		print "Publishing on 'waypoints' topic"
		print PROCESSING_LINES

		path_msg = Path()
		

		for i in range(self.n):
			pose = positions[i]
			orient = orientations[i]

			pose_msg = PoseStamped()
			
			pose_msg.pose.position.x, pose_msg.pose.position.y, pose_msg.pose.position.z = pose
			pose_msg.pose.orientation.x, pose_msg.pose.orientation.y, pose_msg.pose.orientation.z, pose_msg.pose.orientation.w = orient
			
			path_msg.poses.append(pose_msg)

		self._waypoints_pub.publish(path_msg)

		print PROCESSING_LINES
		print "Successfully Published"
		print BREAK_LINE

	def publish_end_round(self, data):
		print BREAK_LINE
		print "Publishing on 'end_round' topic"
		print PROCESSING_LINES
		
		msg = Bool()
		msg.data = data
		self._end_round.publish(msg)

		print PROCESSING_LINES
		print "Successfully Published"
		print BREAK_LINE		

	def _laser_callback(self, msg):
		"""Processing of laser message."""
		# Access to the index of the measurement in front of the robot.
		# NOTE: assumption: the one at angle 0 corresponds to the front.
		i = int((LASER_ANGLE_FRONT - msg.angle_min) / msg.angle_increment)
		if msg.ranges[i] <= MIN_THRESHOLD_DISTANCE:
			self._close_obstacle = True
		else:
			self._close_obstacle = False

def main():

	# Initialization of node
	rospy.init_node("auctioneer")

	# Sleep for couple of seconds to wait for the registration
	rospy.sleep(5)

	# Instance of Leader class
	auctioneer_obj = Auctioneer()

	# Sleep for few seconds while other nodes get initialized and ready to listen to published messages
	rospy.sleep(5)

	# Publish to make auctionees known that auctioneer has set the waypoints and is now accepting collab
	w_p, w_o = auctioneer_obj.get_waypoints() #randomly gets waypoints
	auctioneer_obj.set_waypoints(w_p, w_o) # set the waypoints in the class object
	auctioneer_obj.publish_waypoints(w_p, w_o) # publish the waypoints

	# Set the position and orientation for auctioneer since the node is now up and running
	position, orientation = auctioneer_obj.get_position_orientation()
	auctioneer_obj.set_position_orientation(position, orientation)

	# Instance of the service
	bidding_service = rospy.Service('bidding_service', BiddingService, auctioneer_obj.handle_bids)

	# If interrupted, send a stop command
	rospy.on_shutdown(auctioneer_obj.stop)

	try:
		rospy.spin()
	except rospy.ROSInterruptException:
		rospy.logerr("ROS node interrupted")


if __name__ == "__main__":
	random.seed(SEED)
	roslib.load_manifest('multirobot_auction_tasks')
	main()
