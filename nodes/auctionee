#!/usr/bin/env python

import tf
import time
import math
import rospy # module for ROS APIs
import actionlib

from collections import deque

from geometry_msgs.msg import Twist # message type for cmd_vel
from std_msgs.msg import Bool # message to initiate the coordination - True for yes and False for no
from sensor_msgs.msg import LaserScan
from nav_msgs.msg import Path # message to receive waypoints from the auctioneer

from multirobot_auction_tasks.srv import BiddingService, BiddingServiceResponse
from multirobot_auction_tasks.msg import TaskAllocatedAction

FREQUENCY = 5 # Hz
LINEAR_VELOCITY = 0.2 # m/s
ANGULAR_VELOCITY = math.pi / 6 # rad/s

AUCTIONEER_ROBOT_NAME = 'robot_0'

N = 3 # number of robots spawned = number of waypoints

LASER_ANGLE_FRONT = 0
MIN_THRESHOLD_DISTANCE = 0.6

# publisher constants
DEFAULT_CMD_VEL_TOPIC = 'cmd_vel'

# subscriber constants
DEFAULT_SCAN_TOPIC = 'scan'
DEFAULT_WAYPOINTS_TOPIC = '/%s/waypoints'
DEFAULT_END_ROUND_TOPIC = '/%s/end_round'

# logging constants
BREAK_LINE = "===================================================================================================="
PROCESSING_LINES = ".\n.\n."
TAB_IT = "\t"

class Auctionee:
	def __init__(self, n=N, linear_velocity=LINEAR_VELOCITY, angular_velocity=ANGULAR_VELOCITY):
		""" Constructor """
		self.n = n
		self.robot_name = str(rospy.get_namespace())
		self.linear_velocity = linear_velocity
		self.angular_velocity = angular_velocity
		self.rate = rospy.Rate(FREQUENCY)

		# Setting up publishers
		self._cmd_pub = rospy.Publisher(DEFAULT_CMD_VEL_TOPIC, Twist, queue_size=1)

		# Setting up subscribers
		self._laser_sub = rospy.Subscriber(DEFAULT_SCAN_TOPIC, LaserScan, self._laser_callback, queue_size=1)
		self._waypoints_sub = rospy.Subscriber(DEFAULT_WAYPOINTS_TOPIC % AUCTIONEER_ROBOT_NAME, Path, self._waypoints_callback)
		self._end_round_sub = rospy.Subscriber(DEFAULT_END_ROUND_TOPIC % AUCTIONEER_ROBOT_NAME, Bool, self._end_round_callback)

		#other variables
		self.end_round = False # to be set by the '_end_round_sub' subscriber
		self.waypoints_positions = [] # to be set by the '_waypoints_sub' subscriber
		self.waypoints_orientations = [] # to be set by the '_waypoints_sub' subscriber
		self.round_number = 1 # This will be incremented whenever a round successfully completes
		self.assigned_tasks = deque() # queue of tasks - queue of tuples where tuple has 2 values
									  # value 1 is start position/orientation, value 2 is end position of that task

		# Instantiate the tf listener
		self.listener = tf.TransformListener()

		# Setting up auctionee's action server
		self.action_server = actionlib.SimpleActionServer('task_allocation_server', TaskAllocatedAction, self.handle_task, False)
		self.action_server.start()

	
	def stop(self):
		""" Stop the robot """
		twist_msg = Twist()
		self._cmd_pub.publish(twist_msg)

	def rotate_in_place(self, rotation_angle):
		"""
		Rotate in place the robot of rotation_angle (rad) based on fixed velocity.
		Assumption: Counterclockwise rotation.
		"""
		twist_msg = Twist()
		twist_msg.angular.z = self.angular_velocity * (1 if rotation_angle > 0 else -1)

		duration = abs(rotation_angle / twist_msg.angular.z)

		start_time = rospy.get_rostime()

		while not rospy.is_shutdown():
			# Check if done
			if rospy.get_rostime() - start_time >= rospy.Duration(duration):
				break

			# Publish message.
			self._cmd_pub.publish(twist_msg)

			# Sleep to keep the set frequency.
			self.rate.sleep()

		# Rotated the required angle, stop.
		self.stop()

	def move_forward(self, distance):
		"""Function to move_forward for a given distance."""

		# Rate at which to operate the while loop.
		rate = rospy.Rate(FREQUENCY)

		# Setting velocities. 
		twist_msg = Twist()
		twist_msg.linear.x = self.linear_velocity
		start_time = rospy.get_rostime()
		duration = rospy.Duration(distance/twist_msg.linear.x)

		start = None
		while not rospy.is_shutdown():
			# Check if traveled of given distance based on time.
			if rospy.get_rostime() - start_time >= duration:
				break

			if self._close_obstacle:
				# print "Obstacle is too close"
				start = time.time()
				while self._close_obstacle:
					self.stop()
					time.sleep(1)
				end = time.time()
				# print "Obstacle was too close for ", end - start
				# print "Duration", duration
				start_time += rospy.Duration(end - start)

			self._cmd_pub.publish(twist_msg)

			# Sleep to keep the set publishing frequency.
			rate.sleep()

		# Traveled the required distance, stop.
		self.stop()

	def execute_task(self, task):
		task_start_pose, task_start_orient = task[0]
		task_end_pose, task_end_orient = task[1]


		roll, pitch, yaw = tf.transformations.euler_from_quaternion(task_start_orient)


		dist = ((task_start_pose[0] - task_end_pose[0])**2 + (task_start_pose[1] - task_end_pose[1])**2)**0.5

		angle =  math.atan2(task_end_pose[1] - task_start_pose[1], task_end_pose[0] - task_start_pose[0]) - yaw

		print TAB_IT, "Robot %s is moving to"%self.robot_name, task_end_pose

		self.rotate_in_place(angle)
		self.move_forward(dist)

		self.position = task_end_pose
		self.orientation = tf.transformations.quaternion_from_euler(roll, pitch, angle)

	def handle_task(self, goal):
		print PROCESSING_LINES
		print "Goal received by <<<<%s>>>> is" % self.robot_name, goal, ". Setting goal/task"
		print PROCESSING_LINES

		task_to_execute = goal.task_num

		task_position = self.waypoints_positions[task_to_execute]
		task_orientation = self.waypoints_orientations[task_to_execute]

		self.assigned_tasks.append(((self.position, self.orientation), (task_position, task_orientation)))

		self.action_server.set_succeeded()

		print PROCESSING_LINES
		print "Successfully set up goal"

	def enter_round(self):
		# At every round of the auction update the position of the robot based on the tas
		odom_frame = self.robot_name + 'odom'
		parent_ref_frame = 'world'
		trans, rot = self.get_tf_from_listener(parent_ref_frame, odom_frame)

		# connect to the BiddingService offered by the auctioneer
		rospy.wait_for_service("/%s/bidding_service" % AUCTIONEER_ROBOT_NAME)
		srv = rospy.ServiceProxy("/%s/bidding_service" % AUCTIONEER_ROBOT_NAME, BiddingService)
		accepted = srv(bids, self.robot_name)

		# keep sending the bids until auctioneer acknowledges
		# keep a counter to limit the number of requests made
		# to prevent server from getting overloaded
		request_counter = 0
		while not accepted:
			print "Request not accepted for",self.robot_name, "\nRetrying.."
			if request_counter == 5:
				break
			accepted = srv(bids, self.robot_name)
			request_counter += 1
			time.sleep(5)

	def enter_auction(self):
		
		# number of rounds will be the same as the number of tasks
		print BREAK_LINE
		print "%s Entered Auction" % self.robot_name
		print PROCESSING_LINES

		num_rounds = len(self.waypoints_positions)
		for i in range(num_rounds):

			print "\nRound {0}......".format(i+1)

			# calculate the bids to all the waypoints from the current robot position
			# if the robot is already at or vey close to a waypoint,
			# it implies that the robot has done that task so while sending the bid
			# change its value to positive infinity or MAX_VAL
			# This will prevent auctioneer to reconsider that bid,
			# even if the auctioneer logic fails to prevent duplicated allotment
			bids = []
			for pose in self.waypoints_positions:
				dist = ((pose[0] - self.position[0])**2 + (pose[1] - self.position[1])**2)**0.5
				bids.append(dist)

			# connect to the BiddingService offered by the auctioneer
			rospy.wait_for_service("/%s/bidding_service" % AUCTIONEER_ROBOT_NAME)
			srv = rospy.ServiceProxy("/%s/bidding_service" % AUCTIONEER_ROBOT_NAME, BiddingService)
			accepted = srv(bids, self.robot_name)

			# keep sending the bids until auctioneer acknowledges
			# keep a counter to limit the number of requests made
			# to prevent server from getting overloaded
			request_counter = 0
			while not accepted:
				print "Request not accepted for",self.robot_name, "\nRetrying.."
				if request_counter == 5:
					break
				accepted = srv(bids, self.robot_name)
				request_counter += 1
				time.sleep(5)

			while not self.end_round:
				continue

			self.end_round = False
			time.sleep(2)

		while len(self.assigned_tasks):
			print "\nExecuting task.."
			task = self.assigned_tasks.popleft()
			self.execute_task(task)
			print "Done"

		print PROCESSING_LINES
		print "Auction is now finished"
		print BREAK_LINE


	def get_tf_from_listener(self, parent_ref_frame, child_ref_frame):
		"""
		Get transformation from listener using 'listener' instance
		"""
		trans = (0, 0, 0)
		rot = (0, 0, 0, 0)
		try:
			trans, rot = self.listener.lookupTransform(parent_ref_frame, child_ref_frame, rospy.Time(0))

		except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException) as e:
			print "Exception has occured", repr(e)
			pass
		return trans, rot

	def set_position_orientation(self, position, orientation):
		self.position = position
		self.orientation = orientation

	def get_position_orientation(self):
		print BREAK_LINE
		print "Setting up position and orientation for <<<%s>>> from tf listener" % self.robot_name
		print PROCESSING_LINES

		auctionee_odom_frame = self.robot_name + 'odom'
		position, orientation = self.get_tf_from_listener('world', auctionee_odom_frame)
		
		print PROCESSING_LINES
		print "Successfully set up position and orientation"
		print BREAK_LINE

		return position, orientation

	def _waypoints_callback(self, msg):
		# print "Waypoint received", msg
		# print "Length of array in msg", len(msg.poses)
		if len(msg.poses) > 0:
			for pose in msg.poses:
				# print "Pose in loop", pose
				self.waypoints_positions.append((pose.pose.position.x, pose.pose.position.y, pose.pose.position.z))
				self.waypoints_orientations.append((pose.pose.orientation.x, pose.pose.orientation.y, pose.pose.orientation.z, pose.pose.orientation.w))

	def _end_round_callback(self, msg):
		""" Callback for _end_round_sub Subscriber
			Sets end_round to the value received from the auctioneer
		"""
		self.end_round = msg.data

	def _laser_callback(self, msg):
		"""Processing of laser message."""
		# Access to the index of the measurement in front of the robot.
		# NOTE: assumption: the one at angle 0 corresponds to the front.
		i = int((LASER_ANGLE_FRONT - msg.angle_min) / msg.angle_increment)
		if msg.ranges[i] <= MIN_THRESHOLD_DISTANCE:
			self._close_obstacle = True
		else:
			self._close_obstacle = False

def main():
	# Initialization of node
	rospy.init_node("auctionee")

	# Sleep for couple of seconds to wait for the registration
	rospy.sleep(5)

	# get the robot namespace
	robotname = str(rospy.get_namespace())

	# Instance of Leader class
	auctionee_obj = Auctionee()

	# Sleep for few seconds while other nodes get initialized and ready to listen to published messages
	rospy.sleep(5)

	# Set the position and orientation for auctionee since the node is now up and running
	position, orientation = auctionee_obj.get_position_orientation()
	auctionee_obj.set_position_orientation(position, orientation)

	while not len(auctionee_obj.waypoints_positions):
		continue

	# initiate auction process
	# when round 1 begins, it also marks the start of the auction
	auctionee_obj.enter_auction()

	# If interrupted, send a stop command
	rospy.on_shutdown(auctionee_obj.stop)

	try:
		rospy.spin()
	except rospy.ROSInterruptException:
		rospy.logerr("ROS node interrupted")

if __name__ == "__main__":
	main()
